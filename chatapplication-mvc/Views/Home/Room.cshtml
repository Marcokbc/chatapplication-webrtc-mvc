@{
    ViewData["Title"] = "Room";
}

<div class="container-fluid d-flex justify-content-center align-items-center" style="height: 100vh; position: relative;">
    <div class="p-4 max-width">
        <div class="border-rounded">
            <div class="video-container m-3 container">
                <div video-grid class="d-flex flex-wrap flex-row"></div>
            </div>
        </div>
        <div class="border-rounded mt-3" style="position: fixed; width: calc(100% - 20px); max-width: 600px; bottom: 10%; left: 50%; transform: translateX(-50%);">
            <div class="text-center my-1 mx-2">
                <button class="buttonRoom mx-2" id="muteButton" onclick="toggleMute()">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-mic" viewBox="0 0 16 16">
                        <path d="M3.5 6.5A.5.5 0 0 1 4 7v1a4 4 0 0 0 8 0V7a.5.5 0 0 1 1 0v1a5 5 0 0 1-4.5 4.975V15h3a.5.5 0 0 1 0 1h-7a.5.5 0 0 1 0-1h3v-2.025A5 5 0 0 1 3 8V7a.5.5 0 0 1 .5-.5" />
                        <path d="M10 8a2 2 0 1 1-4 0V3a2 2 0 1 1 4 0zM8 0a3 3 0 0 0-3 3v5a3 3 0 0 0 6 0V3a3 3 0 0 0-3-3" />
                    </svg>
                </button>
                <button class="buttonRoom mx-2" onclick="leaveRoom()">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-power" viewBox="0 0 16 16">
                        <path d="M7.5 1v7h1V1z" />
                        <path d="M3 8.812a5 5 0 0 1 2.578-4.375l-.485-.874A6 6 0 1 0 11 3.616l-.501.865A5 5 0 1 1 3 8.812" />
                    </svg>
                </button>
            </div>
        </div>
    </div>
</div>




<script src="~/js/signalr/dist/browser/signalr.min.js"></script>
<script src="https://unpkg.com/peerjs@1.5.2/dist/peerjs.min.js"></script>
<script>
    const ROOM_ID = '@ViewBag.roomId'
    let userId = null
    let localStream = null
    const Peers = {}

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chat").build();

    const myPeer = new Peer()

    myPeer.on('open', id => {
        userId = id;
        const startSignalR = async () => {
            await connection.start();
            await connection.invoke("JoinRoom", ROOM_ID, userId)
        }
        startSignalR();
    })

    const videoGrid = document.querySelector('[video-grid]')
    const myVideo = document.createElement('video')
    myVideo.muted = true;

    navigator.mediaDevices.getUserMedia({
        audio: true,
        video: true
    }).then(stream => {
        addVideoStream(myVideo, stream)

        localStream = stream
    })

    connection.on('user-connected', id => {
        if (userId === id) return;

        connectNewUser(id, localStream)
    })

    connection.on('user-disconnected', id => {
        if (Peers[id]) Peers[id].close();
    })

    myPeer.on('call', call => {
        call.answer(localStream)

        const userVideo = document.createElement('video')
        call.on('stream', userVideoStream => {
            addVideoStream(userVideo, userVideoStream)
        })
    })

    const addVideoStream = (video, stream) => {
        video.srcObject = stream;
        video.addEventListener('loadedmetadata', () => {
            video.play()
        })
        videoGrid.appendChild(video)
    }

    const connectNewUser = (userId, localStream) => {
        const userVideo = document.createElement('video')
        const call = myPeer.call(userId, localStream)

        call.on('stream', userVideoStream => {
            addVideoStream(userVideo, userVideoStream)
        })

        call.on('close', () => {
            userVideo.remove()
        })

        Peers[userId] = call
    }

    function toggleMute() {
        if (localStream) {
            const audioTracks = localStream.getAudioTracks();
            const muteButton = document.getElementById('muteButton')

            muteButton.innerHTML = '';

            if (audioTracks.length > 0) {
                audioTracks[0].enabled = !audioTracks[0].enabled;
                if (audioTracks[0].enabled) {
                    console.log("Áudio habilitado" + userId);

                    var svgElement = document.createElementNS("http://www.w3.org/2000/svg", "svg");

                    svgElement.setAttribute("xmlns", "http://www.w3.org/2000/svg");
                    svgElement.setAttribute("width", "16");
                    svgElement.setAttribute("height", "16");
                    svgElement.setAttribute("fill", "currentColor");
                    svgElement.setAttribute("class", "bi bi-mic");
                    svgElement.setAttribute("viewBox", "0 0 16 16");

                    var path1 = document.createElementNS("http://www.w3.org/2000/svg", "path");
                    path1.setAttribute("d", "M3.5 6.5A.5.5 0 0 1 4 7v1a4 4 0 0 0 8 0V7a.5.5 0 0 1 1 0v1a5 5 0 0 1-4.5 4.975V15h3a.5.5 0 0 1 0 1h-7a.5.5 0 0 1 0-1h3v-2.025A5 5 0 0 1 3 8V7a.5.5 0 0 1 .5-.5");

                    var path2 = document.createElementNS("http://www.w3.org/2000/svg", "path");
                    path2.setAttribute("d", "M10 8a2 2 0 1 1-4 0V3a2 2 0 1 1 4 0zM8 0a3 3 0 0 0-3 3v5a3 3 0 0 0 6 0V3a3 3 0 0 0-3-3");

                    svgElement.appendChild(path1);
                    svgElement.appendChild(path2);

                    muteButton.appendChild(svgElement);
                } else {
                    console.log("Áudio desabilitado" + userId);

                    var svgElement = document.createElementNS("http://www.w3.org/2000/svg", "svg");

                    svgElement.setAttribute("xmlns", "http://www.w3.org/2000/svg");
                    svgElement.setAttribute("width", "16");
                    svgElement.setAttribute("height", "16");
                    svgElement.setAttribute("fill", "currentColor");
                    svgElement.setAttribute("class", "bi bi-mic-mute");
                    svgElement.setAttribute("viewBox", "0 0 16 16");

                    var path1 = document.createElementNS("http://www.w3.org/2000/svg", "path");
                    path1.setAttribute("d", "M13 8c0 .564-.094 1.107-.266 1.613l-.814-.814A4 4 0 0 0 12 8V7a.5.5 0 0 1 1 0zm-5 4c.818 0 1.578-.245 2.212-.667l.718.719a5 5 0 0 1-2.43.923V15h3a.5.5 0 0 1 0 1h-7a.5.5 0 0 1 0-1h3v-2.025A5 5 0 0 1 3 8V7a.5.5 0 0 1 1 0v1a4 4 0 0 0 4 4");

                    var path2 = document.createElementNS("http://www.w3.org/2000/svg", "path");
                    path2.setAttribute("d", "M9.486 10.607-.748-.748A2 2 0 0 1 6 8v-.878l-1-1V8a3 3 0 0 0 4.486 2.607m-7.84-9.253 12 12 .708-.708-12-12z");

                    svgElement.appendChild(path1);
                    svgElement.appendChild(path2);

                    muteButton.appendChild(svgElement);
                }
            }
        }
    }

    function leaveRoom() {
        connection.stop();

        window.location.href = "/"
    }

</script>
